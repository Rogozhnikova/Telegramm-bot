import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, LabeledPrice, Bot
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    PreCheckoutQueryHandler,
)
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")

# –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –∫–≤–µ—Å—Ç–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
quest_steps = [
    {
        "description": "–ü—Ä–∏–≤–µ—Ç, —è –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –ø–æ–≥—É–ª—è—Ç—å –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π.",
        "question": "–ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ - –ø–∞–º—è—Ç–Ω–∏–∫ –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—é —Ä–∞–¥–∏–æ. –í –∫–∞–∫–æ–º –≥–æ–¥—É –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω?",
        "answer_type": "text",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: —Ç–µ–∫—Å—Ç
        "correct_answer": "1975",  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    },
    {
        "description": "–¢–µ–ø–µ—Ä—å –≤ –∫–æ–Ω—Ü–µ –∞–ª–ª–µ–∏ –Ω–∞–π–¥–∏ –∑–¥–∞–Ω–∏–µ —Å –¥–≤—É–º—è —Ñ–ª–∞–≥–∞–º–∏ –∏ –ø—Ä–æ—á—Ç–∏ —á–µ—Ä–Ω—É—é —Ç–∞–±–ª–∏—á–∫—É –Ω–∞ –Ω–µ–º",
        "question": "–ö—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª—Å—è —Ç–∞–º –Ω–∞ –ø—É—Ç–∏ –∏–∑ –°–∏–±–∏—Ä–∏?",
        "answer_type": "text",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "correct_answer": "–¥–µ–∫–∞–±—Ä–∏—Å—Ç—ã",
    },
    {
        "description": "–†–∞–∑–≤–µ—Ä–Ω–∏—Å—å –Ω–∞ 180. –°–Ω–æ–≤–∞ –∑–¥–∞–Ω–∏–µ, –∏–¥–∏ –∫ –Ω–µ–º—É",
        "question": "–°–∫–æ–ª—å–∫–æ —ç—Ç–∞–∂–µ–π —ç—Ç–æ –∑–¥–∞–Ω–∏–µ?",
        "answer_type": "text",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "correct_answer": "10",
    },
    {
        "description": "–°–ª–µ–≤–∞ –Ω–∞ —Å–æ—Å–µ–¥–Ω–µ–º –∑–¥–∞–Ω–∏–∏ –±—É–¥–µ—Ç —Ä–∏—Å—É–Ω–æ–∫",
        "question": "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –ø–æ–¥ —á–∏—Å–ª–æ–º 24?",
        "answer_type": "text",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "correct_answer": "–∞–ª–º–∞–∑–Ω—ã–µ –ø–∞–ª–∫–∏",
    },
    {
        "description": "–ò–¥–∏ –ø—Ä—è–º–æ –∏ –Ω–∞–π–¥–∏ –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏ –ú—ã —Å—Ç–∞–Ω–µ–º –ª—É—á—à–µ",
        "question": "–ö–∞–∫–æ–µ —á–∏—Å–ª–æ –µ—Å—Ç—å —Ä—è–¥–æ–º —Å –Ω–∞–¥–ø–∏—Å—å—é –Ω–∞ —ç—Ç–æ–π –∂–µ —Å—Ç–∞–Ω–µ?",
        "answer_type": "text",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "correct_answer": "180",
    },
    {
        "description": "–ò–¥–µ–º –¥–∞–ª—å—à–µ –ø–æ —É–ª–∏—Ü–µ. –ü–æ –ø—É—Ç–∏ –±—É–¥–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–¥–∞–Ω–∏–µ",
        "question": "–ö—Ç–æ –∂–∏–ª –≤ —ç—Ç–æ–º –¥–æ–º–µ?",
        "answer_type": "text",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "correct_answer": "–º–∞–º–∏–Ω-—Å–∏–±–∏—Ä—è–∫",
    },
    {
        "description": "–ß—É—Ç—å –¥–∞–ª—å—à–µ –±—É–¥—è—Ç –ø–∞–º—è—Ç–Ω–∏–∫ –ü—É—à–Ω–∏–∫—É",
        "question": "–ß—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤–Ω–∏–∑—É?",
        "answer_type": "text",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "correct_answer": "–≤–µ–ª–µ–Ω–∏—é –±–æ–∂–∏—é, –æ –º—É–∑–∞, –±—É–¥—å –ø–æ—Å–ª—É—à–Ω–∞",
    },
    {
        "description": "–ù–µ –±—É–¥–µ–º —É—Ö–æ–¥–∏—Ç—å –¥–∞–ª–µ–∫–æ. –ò–¥–∏ –ø–æ —É–ª–∏—Ü–µ –ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∞—è –¥–æ —É–ª–∏—Ü—ã –¶–∞—Ä—Å–∫–∞—è",
        "question": "–¢—ã –Ω–∞–π–¥–µ—à—å –∞—Ñ–∏—à—É. –í –Ω–µ–π –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏–ª–∞. –ù–∞–ø–∏—à–∏ –µ–≥–æ",
        "answer_type": "text",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "correct_answer": "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π",
    },
    {
        "description": "–ï—Å–ª–∏ —Å—Ç–æ—è—Ç—å –ª–∏—Ü–æ–º –∫ –∞—Ñ–∏—à–µ, —Ç–æ —Å–ª–µ–≤–∞ –±—É–¥–µ—Ç –µ—â–µ –æ–¥–Ω–æ –ø–∞–º—è—Ç–Ω–æ–µ –º–µ—Å—Ç–æ. –ò–¥–∏ –∫ –Ω–µ–º—É",
        "question": "–ö–∞–∫–∞—è —Ñ–∞–º–∏–ª–∏—è –Ω–∞–ø–∏—Å–∞–Ω–∞ —Ç–∞–º?",
        "answer_type": "text",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "correct_answer": "–µ–≥–æ—Ä–æ–≤",
    },
    {
        "description": "–ù–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ –Ω–∞–ø—Ä–∞–≤–æ. –î–æ—Ä–æ–≥—É –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∏ –∏–¥–∏ –ø—Ä—è–º–æ",
        "question": "–í—ã–≤–µ—Å–∫–∞ –∫–∞–∫–æ–≥–æ –±–∞—Ä–∞ –≤–∏–¥–Ω–∞?",
        "answer_type": "text",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "correct_answer": "—è–Ω–∫–∏",
    },
    {
        "description": "–ù–∞ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –¥–æ—Ä–æ–≥–∏ –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç –∫—É–ª—å—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è",
        "question": "–ß–µ–π –¥–æ–º? –¢–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é",
        "answer_type": "text",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "correct_answer": "—Å–µ–ª–∏–≤–∞–Ω–æ–≤–æ–π",
    },
    {
        "description": "–ò–¥–∏ –¥–∞–ª—å—à–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø—Ä–æ—Å–ø–µ–∫—Ç–∞ –õ–µ–Ω–∏–Ω–∞. –í–∏–¥–∏—à—å –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏ —Å –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å—É—â–µ—Å—Ç–≤–∞–º–∏?",
        "question": "–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ —Ç–æ —Å—É—â–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –∏–º–µ–µ—Ç –≤—Å–µ–≥–æ –¥–≤–µ –Ω–æ–≥–∏?",
        "answer_type": "text",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "correct_answer": "–±–µ–ª–æ–µ",
    },
    {
        "description": "–ò–¥–∏ –¥–∞–ª—å—à–µ. –¢—ã –≤—Å—Ç—Ä–µ—Ç–∏—à—å –º–Ω–æ–≥–æ –∫–æ—Ç–∏–∫–æ–≤.",
        "question": "–û–Ω–∏ –¥–≤—É—Ö —Ü–≤–µ—Ç–æ–≤. –ù–æ –∫–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –±–æ–ª—å—à–µ?",
        "answer_type": "text",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "correct_answer": "–∫—Ä–∞—Å–Ω—ã–π",
    },
    {
        "description": "–ó–Ω–∞–µ—à—å, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∞–∫–∞–¥–µ–º–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–µ–¥–∏–∏?",
        "question": "–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –∫—Ä—É–∂–∫–∏ –Ω–∞ –¥–≤–µ—Ä—è—Ö?",
        "answer_type": "text",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "correct_answer": "–∂–µ–ª—Ç—ã–π",
    },
    {
        "description": "–ö–≤–µ—Å—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É –∏ —Ç–µ–±—è –∂–¥–µ—Ç —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å",
        "question": "–ì–æ—Ç–æ–≤?",
        "answer_type": "options",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "options": ["–î–∞", "–ù–µ—Ç"],
        "correct": 0,
    },
    {
        "description": "–í—ã–±–∏—Ä–∞–π, –∫–æ—Ñ–µ –∏–ª–∏ —á–µ–±—É—Ä–µ–∫?",
        "question": "",
        "answer_type": "options",  # –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "options": ["–ö–æ—Ñ–µ", "–ß–µ–±—É—Ä–µ–∫"],
        "all_correct": True,
    },
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
def create_keyboard(options):
    keyboard = [
        [InlineKeyboardButton(option, callback_data=str(i))] for i, option in enumerate(options)
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    keyboard.append([InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", callback_data="skip")])
    return InlineKeyboardMarkup(keyboard)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def mark_user_as_premium(user_id, duration_hours=1.5):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    premium_until = datetime.now() + timedelta(hours=duration_hours)
    cursor.execute(
        "INSERT OR REPLACE INTO users (user_id, is_premium, premium_until) VALUES (?, 1, ?)",
        (user_id, premium_until)
    )
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_premium(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT is_premium, premium_until FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()

    if result:
        is_premium, premium_until = result
        if is_premium and premium_until:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
            return datetime.now() < datetime.strptime(premium_until, "%Y-%m-%d %H:%M:%S.%f")
    return False

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞.")
    user_id = update.message.from_user.id
    if is_user_premium(user_id):
        await update.message.reply_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–≤–µ—Å—Ç—É.",
            reply_markup=create_main_keyboard()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        context.user_data['step'] = 0
        await send_step(update, context)
    else:
        await update.message.reply_text(
            "üòî –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –∫–≤–µ—Å—Ç—É –∏—Å—Ç–µ–∫. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å' –Ω–∏–∂–µ.",
            reply_markup=create_main_keyboard()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
def create_main_keyboard():
    keyboard = [["–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø üéüÔ∏è"]]  # –ö–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø"
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø"
async def handle_buy_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await buy(update, context)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é buy –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞

# –ö–æ–º–∞–Ω–¥–∞ /buy –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–æ–∫—É–ø–∫–∏
async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.message.chat_id
    title = "–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø"
    description = "–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–≤–µ—Å—Ç—É!"
    payload = "Custom-Payload"
    currency = "RUB"
    price = 100  # –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö

    try:
        await context.bot.send_invoice(
            chat_id=chat_id,
            title=title,
            description=description,
            payload=payload,
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency=currency,
            prices=[LabeledPrice("–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø", 10000)],  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            start_parameter="test",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≥–ª—É–±–æ–∫–æ–π —Å—Å—ã–ª–∫–∏
            need_name=True,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            need_phone_number=True,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            need_email=True  # –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–ª–∞—Ç—ë–∂
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.pre_checkout_query
    await query.answer(ok=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    mark_user_as_premium(user_id, duration_hours=2.5)  # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 2,5 —á–∞—Å–∞
    await update.message.reply_text(
        "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–≤–µ—Å—Ç—É –Ω–∞ 1,5 —á–∞—Å–∞."
    )
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫–≤–µ—Å—Ç–∞
    context.user_data['step'] = 0
    await send_step(update, context)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
async def send_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    step_index = context.user_data.get('step', 0)
    user_id = update.message.from_user.id

    if not is_user_premium(user_id):
        await update.message.reply_text(
            "üòî –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –∫–≤–µ—Å—Ç—É –∏—Å—Ç–µ–∫. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å' –Ω–∏–∂–µ.",
            reply_markup=create_main_keyboard()
        )
        return

    if step_index < len(quest_steps):
        step = quest_steps[step_index]
        message = f"{step['description']}\n{step['question']}"

        if step["answer_type"] == "options":
            reply_markup = create_keyboard(step["options"])
        else:
            reply_markup = None

        if update.callback_query:
            await update.callback_query.message.reply_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–≤–µ—Å—Ç! üéâ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–≥–∞–¥–∫—É
async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    step_index = context.user_data.get('step', 0)
    if step_index >= len(quest_steps):
        await update.message.reply_text("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–≤–µ—Å—Ç! üéâ")
        return

    step = quest_steps[step_index]

    if step["answer_type"] == "options":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        query = update.callback_query
        await query.answer()
        selected_option = int(query.data)

        if "all_correct" in step and step["all_correct"]:
            await query.message.reply_text("‚úÖ –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É...")
            context.user_data['step'] += 1
            await send_step(update, context)
        elif selected_option == step["correct"]:
            await query.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É...")
            context.user_data['step'] += 1
            await send_step(update, context)
        else:
            await query.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")

    elif step["answer_type"] == "text":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        user_answer = update.message.text.strip().lower()
        correct_answer = step["correct_answer"].lower()

        if user_answer == correct_answer:
            await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É...")
            context.user_data['step'] += 1
            await send_step(update, context)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %s", context.error)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ webhook
    bot = Bot(token=BOT_TOKEN)
    bot.delete_webhook()
    logger.info("Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
     # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    cursor.execute("DROP TABLE IF EXISTS users")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            is_premium BOOLEAN DEFAULT 0,
            premium_until TIMESTAMP  -- –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        )
    """)
    conn.commit()
    conn.close()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("buy", buy))
    # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø"
    application.add_handler(MessageHandler(filters.Regex("^–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø üéüÔ∏è$"), handle_buy_button))
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    application.add_handler(CallbackQueryHandler(handle_response))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))  # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")